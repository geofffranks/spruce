#!/bin/bash

#
# ci/scripts/shipit
#
# Script for generating Github release / tag assets
# and managing release notes for a software pipeline
#
# author:  James Hunt <james@niftylogic.com>
# created: 2016-03-30

set -eu

if [[ -z ${VERSION_FROM} ]]; then
  echo >&2 "VERSION_FROM environment variable not set, or empty.  Did you misconfigure Concourse?"
  exit 2
fi
if [[ ! -f ${VERSION_FROM} ]]; then
  echo >&2 "Version file (${VERSION_FROM}) not found.  Did you misconfigure Concourse?"
  exit 2
fi
VERSION=$(cat ${VERSION_FROM})
if [[ -z ${VERSION} ]]; then
  echo >&2 "Version file (${VERSION_FROM}) was empty.  Did you misconfigure Concourse?"
  exit 2
fi

if [[ ! -f ${REPO_ROOT}/ci/release_notes.md ]]; then
  echo >&2 "ci/release_notes.md not found.  Did you forget to write them?"
  exit 1
fi

###############################################################

#?#ORIGIN=$(pwd)
TARGETS=${TARGETS:-linux/amd64 darwin/amd64 windows/amd64}
ROOT=$( cd "$( dirname "${BASH_SOURCE[0]}" )/../.." && pwd )

pushd $REPO_ROOT
newgopath=${ROOT%%/gopath/*}/gopath
if [[ -d ${newgopath} ]]; then
	if [[ -z ${GOPATH} ]]; then
		GOPATH="${newgopath}"
	else
		GOPATH="${newgopath}:${GOPATH}"
	fi
	PATH="${PATH}:${newgopath}/bin"
fi
echo ">> Using GOPATH ${GOPATH}"
godep restore
go get github.com/mitchellh/gox
popd

if [[ -n ${STATIC_BINARY} && ${STATIC_BINARY} != "false" ]]; then
	export CGO_ENABLED=0
fi

pushd $REPO_ROOT
mkdir artifacts
gox -osarch="${TARGETS}" --output="artifacts/${BINARY}-{{.OS}}-{{.Arch}}" -ldflags="-X main.Version=${VERSION}" ./...
go build -o "${BINARY}" -ldflags="-X main.Version=${VERSION}" ${CMD_PKG:-.}
./${BINARY} -v
popd

# Always check that linux/amd64 is statically built
echo "Checking if ${BINARY}-linux-amd64 is a statically linked binary"
if ldd ${REPO_ROOT}/artifacts/${BINARY}-linux-amd64 | grep "not a dynamic executable"; then
	echo "Statically linked. Continuing"
else
	echo "Dynamically linked. Aborting."
	ldd ${REPO_ROOT}/artifacts/${BINARY}-linux-amd64
	exit 1
fi

echo "v${VERSION}"                         > ${RELEASE_ROOT}/tag
echo "${RELEASE_NAME} v${VERSION}"         > ${RELEASE_ROOT}/name
mv ${REPO_ROOT}/ci/release_notes.md          ${RELEASE_ROOT}/notes.md
mv ${REPO_ROOT}/artifacts                    ${RELEASE_ROOT}/artifacts

cat > ${RELEASE_ROOT}/notification <<EOF
<${GITHUB_REPO}/releases/tag/v${VERSION}|${RELEASE_NAME} v${VERSION}> has been released!
EOF

# GIT!
if [[ -z $(git config --global user.email) ]]; then
  git config --global user.email "ci@starkandwayne.com"
fi
if [[ -z $(git config --global user.name) ]]; then
  git config --global user.name "CI Bot"
fi

(cd ${REPO_ROOT}
 git merge --no-edit ${BRANCH}
 git add -A
 git status
 git commit -m "release v${VERSION}")

# so that future steps in the pipeline can push our changes
cp -a ${REPO_ROOT} ${REPO_OUT}/git
